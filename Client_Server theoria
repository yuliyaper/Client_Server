* Клиент-серверная архитектура - это такая архитектура в которой сетевая нагрузка распределяется
между постовщиками услуг, которые называются СЕРВЕРЫ и заказчиками услуг, который называются
КЛИЕНТАМИ.
* Самый распространенный пример клиента - браузер.
* Тонкий клиент - это браузер, потому что вся логика, все вычеслительные мощности расположены на
СЕРВЕРЕ, а клиент это простое ПО, которое только отправляет запросы.
* Толстый клиент - это приложение, которое обеспечивает расширенную функциональность не зависимо
от сервера. Часто сервер является лишь хранилищем данных, а свя обработка данных идет на КЛИЕНТЕ.
Например: 1С-Бухгалтерия (вся логика ведется на КЛИЕНТЕ), все он-лайн игры. 

* Клиент + Сервер = двухуровневая архитектура.
* Клиент + Сервер + База данных = трехуровневая архитектура.

* Все данные  могут хранится на сервере, но когда она есть, мы уверены в сохранности данных и 
легко можем по ним поискать.

* Плюсы архитектуры:
	- выгоднее содержать 1 мощный сервер, чем 100 мощных клинетских машин и хранить 
	  информацию на них;
	- нет дублирования кода, весь код хранится на сервере;
	- персональные данные пользователей в безопасноти на сервере.
* Минусы архитектуры:
	- упал сервер или база данных - ничего не работает.

* В высоконагруженных приложениях между клиентом и сервером может стоять балансировщик, который 
распределяет запросы между несколькими серверами в зависимости от их загруженности.
* Несколько серверов в одной архитектуре - это кластер.
* Горячий резерв - когда два сервера работают в параллель.
* Холодный резерв - когда балансировщик направляет все запросы на один сервер, а второй сервер 
отдыхает. Если с первым что-то случилось, то запросы идут на второй (резервный) сервер.


2) Что ткое HTTP и HTTPS
* Протокол - набор правил передачи информации. С помощью протоколов регламентируется то, как
будет передаваться информация в сети Интернет.

* HTTP (HyperText Transfer Protocol) ― это протокол передачи гипертекста. С его помощью браузер 
получает информацию от сервера и показывает пользователю контент. 
Это первый протокол, который создали для работы в веб-пространстве.

* HTTPS (HyperText Transfer Protocol Secure) ― защищённый протокол передачи данных в интернете. 
Это тот же протокол HTTP, но защищенный протоколалми SSL и TLS.

* Отличия HTTP от HTTPS:
- протокол HTTP не обеспечивает защиту передаваемых данных;
- HTTP работает по порту 80, а HTTPS ― по порту 443;
- сайты с этими протоколами по-разному отображаются в поисковых системах: большее доверие к 
HTTPS и эти сайты выше в поисковой выдаче.

*Версии HTTP:
	- 0.9 самая первая;
	- 1.1 самая распространенная;
	- 2.0 самая современная.

3) HTTP методы
* HTTP-request    запрос на сервер;
  HTTP-response   ответ сервера;

* HTTP запрос состоит из трех основных частей: 
	- request line (строка запроса) здесь указывается метод передачи, версия протокола HTTP
	                                и URL, к которому должен обратиться сервер;
	- message header (заголовок) содержат тело сообщения, передаваемые параметры 
                                     и другие сведения;
	- entity body (тело сообщения) здесь могут находиться передаваемые в запросе данные.
				       Не обязательный параметр.
GET - запрос информации от сервера. Доступен для кеширования данных и добавления в закладки.
      макс. длина URL - 2048. Клиент может передавать параметры выполнения запроса в URI 
      целевого ресурса после символа «?». GET - идемпотентный.
POST - передача пользовательских данных на сервер. Например, в блогах посетители
       обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются 
       серверу методом POST и он помещает их на страницу. При этом передаваемые данные 
       (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с 
       помощью метода POST обычно загружаются файлы на сервер. POST - не идемпотентный.
OPTIONS - используется для определения возможностей веб-сервера или параметров соединения
          для конкретного ресурса.Для того, чтобы узнать возможности всего сервера, 
          клиент должен указать в URI звёздочку — «*». Запросы «OPTIONS * HTTP/1.1» могут
          также применяться для проверки работоспособности сервера (аналогично «пингованию») 
          и тестирования на предмет поддержки сервером протокола HTTP версии 1.1.
PUT - изменение уже имеющейся информации на сервере.
HEAD - получение информации заголовка. Аналогичен методу GET, за исключением того, что в ответе
       сервера отсутствует тело. 
DELETE - удаляет указанный ресурс.
PATCH - подходит для обновления ресурсов.
TRACE - возвращает полученный запрос так, что клиент может увидеть, какую информацию 
        промежуточные серверы добавляют или изменяют в запросе.
CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы 
         содействовать установлению защищённого SSL-соединения через нешифрованный прокси.

4) HTTP статус коды сервера

В HTTP-response содержится STATUS code и STATUS message.

1xx - информационные;
2xx - сообщения об успехе операции;
3хх - сообщения о перенаправлении на другой сервер;
4хх - ошибка со стороны КЛИЕНТА;
5хх - ошибка со стороны СЕРВЕРА.


5) Что такое ядро браузера 

Ядро браузера - представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML,
                XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах 
                CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на 
                экране.  

6) Какие браузеры какиие ядра используют

Blink — движок браузера Google Chrome, Microsoft Edge, Opera;
Gecko — открытый движок проекта Mozilla;
WebKit — движок для браузера Apple Safari.

7) Что такое API

*API (Application programming interface) - «программный интерфейс приложения». Описание способов
которыми одна компьютерная программа может взаимодействовать с другой программой.
Пример работы API это быстрая регистрация на сайте, через аккаунт google. 

Существует четыре различных способа работы API в зависимости от того, когда и почему они 
были созданы:
	SOAP – Simple Object Access Protocol, т. е. простой протокол доступа к объектам. 
	       Клиент и сервер обмениваются сообщениями посредством XML. Это менее гибкий API,
               который был более популярен в прошлом.
	RPC - такие API называются системой удаленного вызова процедур. Клиент выполняет функцию
              (или процедуру) на сервере, и сервер отправляет результат обратно клиенту.
	Websocket API – это еще одна современная разработка web API, которая использует объекты
               JSON для передачи данных. WebSocket API поддерживает двустороннюю связь между  
               клиентскими приложениями и сервером. Сервер может отправлять сообщения обратного 
               вызова подключенным клиентам, что делает его более эффективным, чем REST API.
	REST API - Representational State Transfer, т. е. передача репрезентативного состояния. 
               REST определяет набор функций, таких как GET, PUT, DELETE и т. д., которые 
               клиенты могут использовать для доступа к данным сервера. Клиенты и серверы 
               обмениваются данными по протоколу HTTP.


8. Что такое ендпоинты

* Эндпоинт (Endpoint - конечная точка) представляет собой некий шлюз, который соединяет 
  серверные процессы приложения с внешним интерфейсом. Это адрес, на который отправляются 
  сообщения. 


9) URL (URI, URL, URN)

* URL (Uniform Resource LOCATOR) - уникальный адрес сайта в сети, который определяет его
                                   местонахождение в Интернете;
* URN (Uniform Resource NAME) - неизменяемая последовательность символов, определяющая только 
				имя некоторого ресурса, это ИМЯ определяет ТОЛЬКО НАЗВАНИЕ 
				самого ресурса, но не говорит, как к нему подключаться;
* URI (Uniform Resource IDENTIFIER) - уникальный ИДЕНТИФИКАТОР котороый включает URL и URN и
				      может включать их по отдельности или все вместе. 

10) Идемпотентные HTTP методы

*Идемпотентный HTTP метод -  многократное повторение одних и тех же запросов возвращает 
 одинаковые результаты.
	-DELETE;
	-GET;
	-HEAD;
	-OPTIONS;
	-PUT;
	-TRACE.  


11) Безопасные HTTP методы

* Безопасный HTTP метод - не меняет состояние сервера.Проводит операции 
                          "только чтение" (read-only).
	-GET;
	-HEAD;
	-OPTIONS.


12) Иденфикация, Аутентификация, Авторизация

* Идентификация - вводим ЛОГИН, совпал.
* Аутентификация - вводим ПАРОЛЬ, совпал.
	Двухфакторная аутентификация - ввели пароль, а потом на номер пришло СМС с кодом.
* Авторизация - предоставлению пользователю определенных прав, например ситать письма и тд.

13) Что такое IP
*IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. 
 IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через
 интернет или локальную сеть.

*IP-адрес состоит из четырех чисел (в диапазоне от 0 до 255), которые разделены точками. 
Если все четыре числа неизменны при каждом включении компьютера, то это СТАТИЧЕСКИЙ IP. 
Если что-то меняется — то ДИНАМИЧЕСКИЙ IP.
*На смену IPv4 идет протокол IPv6


14) Что такое октаты в DNS
* DNS (Domain Name System) — система доменных имен, которая преобразует буквенное имя сайта 
 	 		     в IP-адрес.
Октет - это диапозон чисел от 0 до 255, составляющих часть IP адреса. Октеты в IP разделены 
	точкой.	Например в IP: 192.168.1.1 Первая октета будет - 192, вторая октета - 168.

15) Что такое порт, сколько портов у Linux сервера
* Порт - это просто целое число на пакете данных, который показывает, для какой программы 
         эти данные предназначены.
На данный момент существует определенное число портов – 65 535.

16) Уровни OSI
*OSI (Open Systems Interconnection model) это скелет, фундамент и база всех сетевых сущностей. 
      Модель определяет сетевые протоколы, распределяя их на 7 логических уровней. Важно 
      отметить, что в любом процессе, управление сетевой передачей переходит от уровня к уровню,
      последовательно подключая протоколы на каждом из уровней. Модель OSI была изначально 
      придумана как стандартный подход, архитектура или паттерн, который бы описывал сетевое 
      взаимодействие любого сетевого приложения.

Инкапсуляция - процесс, когда информация отправляется и переходит из данных в биты.
Декапсуляция - когда информация, полученная в битах на первом уровне, переходит в 
               данные на седьмом.

#01: ФИЗИЧЕСКИЙ (PHYSICAL) УРОВЕНЬ
	На первом уровне модели OSI происходит передача физических сигналов (токов, света,
	радио) от источника к получателю. На этом уровне мы оперируем кабелями, контактами в
        разъемах, кодированием единиц и нулей, модуляцией и так далее
#02: КАНАЛЬНЫЙ (DATA LINK) УРОВЕНЬ
	На втором уровне мы оперируем понятием «фрейм», или как еще говорят «кадр». Тут 
	появляются первые идентификаторы – MAC – адреса. Они состоят из 48 бит и выглядят 
        примерно так: 00:16:52:00:1f:03.
#03: СЕТЕВОЙ (NETWORK) УРОВЕНЬ
	Сетевой уровень вводит термин «маршрутизация» и, соответственно, IP – адрес.
#04: ТРАНСПОРТНЫЙ (TRANSPORT) УРОВЕНЬ
	Транспортный уровень, обеспечивает передачу данных по сети. Передача осуществляется
	через TCP и UDP. TCP (Transmission Control Protocol) - если трафик чувствителен к 
	потерям. UDP (User Datagram Protocol) - если можно немного потерять.
#05: СЕАНСОВЫЙ (SESSION) УРОВЕНЬ
	Занимается тем, что управляет соединениями, или попросту говоря, сессиями. 
	Он их разрывает.
#06 УРОВЕНЬ ПРЕДСТАВЛЕНИЯ (PRESENTATION)
	На шестом уровне творится преобразование форматов сообщений, такое как кодирование 
	или сжатие. Тут живут JPEG и GIF, например. Так же уровень ответственен за передачу 
	потока на четвертый (транспортный уровень).
#07 УРОВЕНЬ ПРИЛОЖЕНИЯ (APPLICATION)
	Тут находятся сетевые службы, которые позволяют серфить просторы интернета.

17) Хедеры http запросов

Host - HTTP-запрос отправляется на определенные IP-адреса. Но так как большинство серверов 
       способны размещать несколько сайтов под одним IP, они должны знать, какое доменное имя 
       ищет браузер.
	Host: net.tutsplus.com
User-Agent - Этот заголовок может содержать несколько частей информации, таких как:
	Имя и версия браузера
	Название и версия операционной системы.
	Язык по умолчанию.
	User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1
Accept-Language - Этот заголовок отображает настройки языка по умолчанию. Он может содержать
	несколько языков, разделённых запятыми. Первый - это предпочтительный язык, и каждый 
	из перечисленных языков может иметь значение «q», которое представляет собой оценку 
	предпочтения пользователя для языка (min. 0 max. 1).
	Accept-Language: en-us,en;q=0.5
Accept-Encoding - Большинство современных браузеров поддерживают gzip и отправляют это в header. 
	Затем веб-сервер может отправить выходной HTML-код в сжатом формате. Это позволяет 
	уменьшить размер до 80% для экономии пропускной способности и времени.
	Accept-Encoding: gzip,deflate
If-Modified-Since - Если веб-документ уже сохранен в кеше в браузере и вы посещаете его снова, 
	браузер может проверить, был ли документ обновлён, отправив следующее:
	If-Modified-Since: Sat, 28 Nov 2009 06:38:19 GMT
Cookie - это отправляет файлы cookie, хранящиеся в вашем браузере для этого домена. Это пары 
	name=value, разделённые точками с запятой. Cookies могут также содержать id сеанса.
	Cookie: PHPSESSID=r2t5uvjq435r4q7ib3vtdjq120; foo=bar
Referer - содержит ссылочный url.Зашел на домашнюю страницу и нажал ссылку на статью, этот 
	header будет отправлен в браузер:
	Referer: https://net.tutsplus.com/
Authorization - когда веб-страница запрашивает авторизацию, браузер открывает окно входа в 
	систему. Когда вводим имя пользователя и пароль в этом окне, браузер отправляет другой
	HTTP-запрос, но на этот раз он содержит этот header:
	Authorization: Basic bXl1c2VyOm15cGFzcw==.
